---
import SubpageLayout from "../../layouts/subpageLayout.astro";
import "../../styles/animations.css";

const LASTFM_API_KEY = "fe2034203a6d547f4e00094af07e1661";
const LASTFM_USERNAME = "R1111nki";

// 简单的获取封面函数
async function getAlbumCover(mbid: string) {
  console.log("mbid:" + mbid);
  if (!mbid) return null;

  try {
    const response = await fetch(
      `https://musicbrainz.org/ws/2/recording/${mbid}?inc=releases&fmt=json`,
      {
        headers: {
          "User-Agent": "RinkisGarden/1.0 (iam@rinki.top)",
        },
      }
    );
    if (!response.ok) {
      console.log("response not ok: ", response.statusText);
      return null;
    }

    const data = await response.json();
    if (data.releases && data.releases.length > 0) {
      var element = data.releases[0];
      for (let index = 0; index < data.releases.length; index++) {
        element = data.releases[index];
        if (element.barcode !== null) break;
      }
      // 返回 MusicBrainz 的封面 URL 格式
      const releaseId = element.id;
      return `https://coverartarchive.org/release/${releaseId}/front-250`;
    }
  } catch (error) {
    console.error("Cover fetch error:", error);
  }

  return null;
}

let currentTrack = {
  name: "Unknown",
  artist: "Unknown",
  isPlaying: false,
  image: "",
  mbid: "Unknown",
};
let topTracks = [];

try {
  // 获取最近播放
  const recentResponse = await fetch(
    `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&limit=1`
  );
  const recentData = await recentResponse.json();

  if (recentData.recenttracks?.track?.[0]) {
    const track = recentData.recenttracks.track[0];
    currentTrack = {
      name: track.name,
      artist: track.artist["#text"],
      isPlaying: track["@attr"]?.nowplaying === "true",
      mbid: track.mbid,
      image: "Unknown",
    };

    // Use the image directly from Last.fm API response
    if (track.image && track.image.length > 0) {
      // Usually the last image in the array is the largest
      const largeImage =
        track.image.find(
          (img: { size: string }) => img.size === "extralarge"
        ) || track.image[track.image.length - 1];
      currentTrack.image = largeImage["#text"];
    }
  }

  // 获取热门音乐
  const topResponse = await fetch(
    `https://ws.audioscrobbler.com/2.0/?method=user.gettoptracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&period=1month&limit=5`
  );
  const topData = await topResponse.json();

  if (topData.toptracks?.track) {
    for (const track of topData.toptracks.track) {
      const cover = await getAlbumCover(track.mbid);
      topTracks.push({
        name: track.name,
        artist: track.artist.name,
        playcount: track.playcount,
        image: cover,
        mbid: track.mbid,
      });
    }
  }
} catch (error) {
  console.error("Failed to fetch music data:", error);
}
---

<SubpageLayout
  title="music"
  titleColor="bg-green-500"
  borderColor="border-green-500"
>
  <div class="flex justify-center flex-col gap-8">
    <p class="w-full text-center">here's some music that i really love</p>

    <!-- 当前播放 -->
    <div class="w-full flex flex-col text-center justify-center">
      <div
        class="flex justify-center red-wave-title align-middle mb-4 relative"
      >
        <h2
          class="text-2xl font-black hover:font-light font-martian-mono transition-all bg-white rounded-full border-10 border-red-500 py-2 px-8"
        >
          {currentTrack.isPlaying ? "now playing" : "last played"}
        </h2>
      </div>
      <div class="bg-white mt-4">
        <div class="flex flex-col items-center gap-4">
          {
            currentTrack.image ? (
              <img
                src={currentTrack.image}
                alt={currentTrack.name}
                class="size-[300px] rounded-full outline-4 outline-offset-2 outline-black object-cover"
              />
            ) : (
              <div class="size-[300px] rounded-full bg-gray-200 flex items-center justify-center outline-4 outline-offset-2 outline-gray-300">
                <span class="text-gray-500">No Cover</span>
              </div>
            )
          }
          <div class="mt-2">
            <h3
              class="text-2xl font-bold font-martian-mono hover:font-stretch-125% transition-all duration-300"
            >
              {currentTrack.name}
            </h3>
            <p class="text-lg text-gray-600">by {currentTrack.artist}</p>
            {
              currentTrack.isPlaying && (
                <div class="flex mt-2 justify-center">
                  <div class="bg-yellow-500 px-4 py-2 rounded-full flex justify-center items-center gap-2 hover:scale-110 transition-all duration-300">
                    <div class="w-2 h-2 bg-white rounded-full" />
                    <span class="text-sm text-white">playing now</span>
                  </div>
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>

    <!-- 热门音乐 -->
    <div class="w-full flex flex-col text-center justify-center">
      <div
        class="flex justify-center blue-wave-title align-middle mb-4 relative"
      >
        <h2
          class="text-2xl font-black hover:font-light font-martian-mono transition-all bg-white rounded-full border-10 border-blue-500 py-2 px-8"
        >
          top tracks
        </h2>
      </div>
      <div class="bg-white mt-4">
        <div class="space-y-4">
          {
            topTracks.map((track, index) => (
              <div class="flex flex-col items-center gap-4">
                <div class="flex flex-row gap-2">
                  <div class="flex-none text-2xl font-black text-white py-2 px-4 rounded-full bg-purple-500 font-martian-mono transition-all duration-300">
                    {index + 1}
                  </div>
                  <p class="flex-1 text-2xl text-white bg-purple-500 rounded-full font-black hover:font-light font-martian-mono px-4 py-2">
                    {track.playcount} plays
                  </p>
                </div>

                {track.image ? (
                  <img
                    src={track.image}
                    alt={track.name}
                    class="size-[300px] rounded-full outline-4 outline-offset-2 outline-black object-cover"
                  />
                ) : (
                  <div class="size-[300px] rounded-full bg-gray-200 flex items-center justify-center outline-4 outline-offset-2 outline-gray-300">
                    <span class="text-gray-500">No Cover</span>
                  </div>
                )}
                <div class="flex-1 text-center mt-2">
                  <h3 class="text-2xl font-bold font-martian-mono hover:font-stretch-125% transition-all duration-300">
                    {track.name}
                  </h3>
                  <p class="text-lg text-gray-600">by {track.artist}</p>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  <style>
    .blue-wave-title::before {
      content: "";
      position: absolute;
      width: 400%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 40px;
      background-image: url("data:image/svg+xml,%3Csvg width='480' height='40' viewBox='0 0 480 40' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 5H30V35H90V5H150V35H210V5H270V35H330V5H390V35H450V5H480' stroke='oklch(62.3%25%200.214%20259.815)' stroke-width='10'/%3E%3C/svg%3E");
      background-size: 480px 40px;
      background-repeat: repeat-x;
      animation: wave-flow 6s linear infinite;
      z-index: -1;
    }

    .red-wave-title::before {
      content: "";
      position: absolute;
      width: 400%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 30px;
      background-image: url("data:image/svg+xml,%3Csvg width='450' height='30' viewBox='0 0 450 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 15C15 1.66667 30 1.66667 45 15C60 28.3333 75 28.3333 90 15C105 1.66667 120 1.66667 135 15C150 28.3333 165 28.3333 180 15C195 1.66667 210 1.66667 225 15C240 28.3333 255 28.3333 270 15C285 1.66667 300 1.66667 315 15C330 28.3333 345 28.3333 360 15C375 1.66667 390 1.66667 405 15C420 28.3333 435 28.3333 450 15' stroke='oklch(63.7%25%200.237%2025.331)' stroke-width='10' stroke-linecap='square'/%3E%3C/svg%3E");
      background-size: 450px 30px;
      background-repeat: repeat-x;
      animation: wave-flow 6s linear infinite;
      z-index: -1;
    }
  </style>
</SubpageLayout>
